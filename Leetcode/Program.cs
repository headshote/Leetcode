using Leetcode.DataTypes;
using Leetcode.Solutions;
using Leetcode.Utils;
using Leetcode.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Leetcode.Designs;
using System.Text.RegularExpressions;

namespace Leetcode
{
    internal class Program
    {
        static void Main(string[] args)
        {
            //TestValidParenthesis();
            //TestLongetSubstring();
            //TestMedianOfTwoSortedArrays();
            //TestCombinations();
            //TestPermutations();
            //TestLongestValidParentheses();
            //TestMergeKSortedLists();
            //TestSearchSuggestionsSystem();
            //TestFlattenBinaryTree();
            //TestBinaryTreeMaximumPathSum();
            //TestNumberOfIslands();
            //TestPowN();
            //TestIntersectionOfTwoArrays();
            //TestMaximumSubarray();
            //TestIsSubsequence();
            //TestTrappingRainWater();
            //TestLongestPalindromicSubstring();
            //TestFindDuplicateNumberBetween1AndN();
            //TestGameOfLife();
            //TestCopyListWRandomPointer();
            //TestWordLadder();
            //TestBinTreeLowestCommonAncestor();
            //TestRemoveAllInvalidParentheses();
            //TestBestTimeToBuySellStock();
            //TestWordBreak();
            //TestLRUCache();
            //TestTrie();
            //TestMaxPointsOnLine();
            //TestSkyline();
            //TestReverseEveryK();
            //TestStairClimbingCost();
            //TestCanBuildStringFromSubstring();
            //TestPartitionUniqueLetterLabels();
            //TestArrayInlineRemoveElement();
            //TestCombinationsFromArrayCandidatesToTarget();
            //TestNetworkNodesReceiveSignals(); //TODO
            //TestSumBigIntStrings();
            //TestSquareArrayNumbers();
            //TestRottenOrangesGridDuration();
            //TestDiagonalMartix();
            //TestCountOneSubmatrices(); //TODO
            //TestPrefixExcludedProducts();
            TestMaxTreeWidth();

            Console.ReadLine();
        }

        static void TestMaxTreeWidth()
        {
            var vp = new MaxTreeWidth();
            var ps = new[]
            {
                new TreeNode()
                {
                    val = 1,
                    left = new TreeNode()
                    {
                        val = 2,
                        left = new TreeNode()
                        {
                            val = 3
                        },
                        right = new TreeNode()
                        {
                            val = 4
                        }
                    },
                    right = new TreeNode()
                    {
                        val = 5,
                        right = new TreeNode()
                        {
                            val = 6
                        }
                    }
                },
                
                new TreeNode()
                {
                    val = 1,
                    left = new TreeNode()
                    {
                        val = 2,
                        left = new TreeNode()
                        {
                            val = 3
                        },
                        right = new TreeNode()
                        {
                            val = 4
                        }
                    },
                    right = new TreeNode()
                    {
                        val = 5,
                        left = new TreeNode()
                        {
                            val = 6
                        },
                    }
                },

                new TreeNode()
                {
                    val = 1,
                    left = new TreeNode()
                    {
                        val = 2,
                        left = new TreeNode()
                        {
                            val = 3,
                            left = new TreeNode()
                            {
                                val = 2,
                                left = new TreeNode()
                                {
                                    val = 3,
                                    right = new TreeNode()
                                    {
                                        val = 3,
                                        left = new TreeNode()
                                        {
                                            val = 2,
                                            left = new TreeNode()
                                            {
                                                val = 3
                                            },
                                        }
                                    }
                                },
                            }
                        },
                    },
                    right = new TreeNode()
                    {
                        val = 5,
                        left = new TreeNode()
                        {
                            val = 6,
                            left = new TreeNode()
                            {
                                val = 2,
                                left = new TreeNode()
                                {
                                    val = 3,
                                    left = new TreeNode()
                                    {
                                        val = 3,
                                        left = new TreeNode()
                                        {
                                            val = 2,
                                            left = new TreeNode()
                                            {
                                                val = 3
                                            },
                                        }
                                    }
                                },
                            }
                        },
                    }
                },

                null,

                new TreeNode()
                {
                    val = 0
                }
            };
            foreach (var p in ps)
            {
                var maxWidth = vp.WidthOfBinaryTree(p);
                Console.WriteLine($"tree :\n{p}\nwidth:{maxWidth}");
            }
        }

        static void TestPrefixExcludedProducts()
        {
            var msa = new PrefixExcludedProducts();
            var ps1 = new[] {
                new[] {1,2,3,4},
                new[] {-1,1,0,-3,3},
            };
            for (int i = 0; i < ps1.Length; i++)
            {
                var result = msa.ProductExceptSelf(ps1[i]);
                Console.WriteLine($"array [{string.Join(",", ps1[i])}]; products: [{string.Join(",", result)}]");
            }
        }

        static void TestCountOneSubmatrices()
        {
            var s = new CountOneSubmatrices();
            var ts = new[]
            {
                new[]
                {
                    new[] {1,0,1 },
                    new[] {1,1,0 },
                    new[] {1,1,0 },
                },
                new[]
                {
                    new[] {0,1,1,0 },
                    new[] {0,1,1,1 },
                    new[] {1,1,1,0 },
                },
            };
            for (int i = 0; i < ts.Length; i++)
            {
                Console.WriteLine($"matrix: {ts[i].TwoDimArrayToString()} one submarices: {s.NumSubmat(ts[i])}");
            }
        }

        static void TestDiagonalMartix()
        {
            var msa = new DiagonalMartix();
            var ps1 = new[] {
                3,
                1,
                4,
            };
            for (int i = 0; i < ps1.Length; i++)
            {
                var result = msa.GenerateMatrix(ps1[i]);
                Console.WriteLine($"array [{string.Join(",", ps1[i])}]; squared: {result.TwoDimArrayToString()}");
            }
        }

        static void TestRottenOrangesGridDuration()
        {
            var s = new RottenOrangesGridDuration();
            var ts = new[]
            {
                new[]
                {
                    new[] {2,1,1 },
                    new[] {1,1,0 },
                    new[] {0,1,1 },
                },
                new[]
                {
                    new[] {2,1,1 },
                    new[] {0,1,1 },
                    new[] {1,0,1 },
                },
                new[]
                {
                    new[] {0,2 },
                },
                new[]
                {
                    new[] {1,2 },
                },
            };
            for (int i = 0; i < ts.Length; i++)
            {
                Console.WriteLine($"oranges grid: {ts[i].TwoDimArrayToString()} : {s.OrangesRotting(ts[i])}");
            }
        }

        static void TestSquareArrayNumbers()
        {
            var msa = new SquareArrayNumbers();
            var ps1 = new[] {
                new[] {-4,-1,0,3,10},
                new[] {-7,-3,2,3,11},
            };
            for (int i = 0; i < ps1.Length; i++)
            {
                var result = msa.SortedSquares(ps1[i]);
                Console.WriteLine($"array [{string.Join(",", ps1[i])}]; squared: [{string.Join(",", result)}]");
            }
        }

        static void TestSumBigIntStrings()
        {
            var s = new SumBigIntStrings();
            var ss = new[] {
                "11" ,
                "456",
                "0",
                "1",
                "999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
            };
            var ts = new[] {
                "123" ,
                "77" ,
                "0" ,
                "9" ,
                "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999" ,
            };
            for (int i = 0; i < ss.Length; i++)
            {
                Console.WriteLine($"s1='{ss[i]}' + s2='{ts[i]}' = {s.AddStrings(ss[i], ts[i])}");
            }
        }

        static void TestNetworkNodesReceiveSignals()
        {
            var s = new NetworkNodesReceiveSignals();
            var ts = new[]
            {
                new[]
                {
                    new[] {2,1,1 },
                    new[] {2,3,1 },
                    new[] {3,4,1 },
                },
                new[]
                {
                    new[] {1,2,1 },
                },
                new[]
                {
                    new[] {1,2,1 },
                },
                new[]
                {
                    new[] {1,2,1 },
                    new[] {2,1,3 },
                },
                new[]
                {
                    new[] {1,2,1 },
                    new[] {2,3,2 },
                    new[] {1,3,4 },
                },
            };
            var ns = new[]
            {
                4,
                2,
                2,
                2,
                3,
            };
            var ks = new[]
            {
                2,
                1,
                2,
                2,
                1,
            };
            for (int i = 0; i < ts.Length; i++)
            {
                Console.WriteLine($"nodedists: {ts[i].TwoDimArrayToString()} n={ns[i]} k={ks[i]} : {s.NetworkDelayTime(ts[i], ns[i], ks[i])}");
            }
        }
        static void TestCombinationsFromArrayCandidatesToTarget()
        {
            var msa = new CombinationsFromArrayCandidatesToTarget();
            var ps1 = new[] {
                new[] {2,3,6,7},
                new[] {2,3,5},
                new[] {2},
                new[] {100,200,4,12},
            };
            var ps2 = new[] {
                7,
                8,
                1,
                400
            };
            for (int i = 0; i < ps1.Length; i++)
            {
                var arrayBefore = string.Join(",", ps1[i]);
                var result = msa.CombinationSum(ps1[i], ps2[i]);
                Console.WriteLine($"candidates {arrayBefore}; target={ps2[i]} combinations: {result.TwoDimListToString()}");
            }
        }

        static void TestArrayInlineRemoveElement()
        {
            var msa = new ArrayInlineRemoveElement();
            var ps1 = new[] {
                new[] {3,2,2,3},
                new[] {0,1,2,2,3,0,4,2},
            };
            var ps2 = new[] {
                3,
                2,
            };
            for (int i = 0; i < ps1.Length; i++)
            {
                var arrayBefore = string.Join(",", ps1[i]);
                var result = msa.RemoveElement(ps1[i], ps2[i]);
                var arrayAfter = string.Join(",", ps1[i]);
                Console.WriteLine($"before {arrayBefore}; num={ps2[i]} removed: {result}, after: {arrayAfter}");
            }
        }

        static void TestPartitionUniqueLetterLabels()
        {
            var vp = new PartitionUniqueLetterLabels();
            var ps = new[]{
                "ababcbacadefegdehijhklij",
                "eccbbbbdec",
                "caedbdedda",
            };
            foreach (var p in ps)
            {
                var results = vp.PartitionLabels(p);
                Console.WriteLine($"'{p}' partition sizes: ['{string.Join("'], ['", results)}']");
            }
        }

        static void TestCanBuildStringFromSubstring()
        {
            var vp = new CanBuildStringFromSubstring();
            var ps = new[]{
                "abab",
                "aba",
                "abcabcabcabc",
            };
            foreach (var p in ps)
            {
                var results = vp.RepeatedSubstringPattern(p);
                Console.WriteLine($"'{p}' canbe fromed by substrings: ['{results}']");
            }
        }

        static void TestStairClimbingCost()
        {
            var s = new StairClimbingCost();
            var ns = new[] {
                new[] { 10,15,20 },
                new[] { 1,100,1,1,1,100,1,1,100,1 },
                new[] { 0,1,2,2 },
                new[] { 841,462,566,398,243,248,238,650,989,576,361,126,334,729,446,897,953,38,195,679,65,707,196,705,569,275,259,872,630,965,978,109,56,523,851,887,91,544,
                    598,963,305,481,959,560,454,883,50,216,732,572,511,156,177,831,122,667,548,978,771,880,922,777,990,498,525,317,469,151,874,202,519,139,670,341,514,469,858,
                    913,94,849,839,813,664,163,3,802,21,634,944,901,446,186,843,742,330,610,932,614,625,169,833,4,81,55,124,294,71,24,929,534,621,543,417,534,427,327,179,90,341,
                    949,368,692,646,290,488,145,273,617,596,82,538,751,80,616,763,826,932,184,630,478,163,925,259,237,839,602,60,786,603,413,816,278,4,35,243,64,631,405,23,638,618,
                    829,481,877,756,482,999,973,718,157,262,752,931,882,741,40,77,535,542,879,607,879,321,46,210,116,244,830,591,285,382,925,48,497,913,203,239,696,162,623,291,525,
                    950,27,546,293,108,577,672,354,256,3,671,998,22,989,557,424,251,923,542,243,46,488,80,374,372,334,190,817,150,742,362,196,75,193,162,645,859,758,433,903,199,289,
                    175,303,475,818,213,576,181,668,243,297,572,549,840,161,292,719,226,338,981,345,203,655,210,65,111,746,76,935,406,646,976,567,32,726,638,674,727,861,426,297,349,
                    464,973,341,452,826,223,805,940,458,468,967,107,345,987,553,407,916,103,324,367,864,74,946,712,596,105,194,79,634,855,703,70,170,543,208,739,632,663,880,857,824,
                    258,743,488,659,647,470,958,492,211,927,356,488,744,570,143,674,502,589,270,80,6,463,506,556,495,713,407,229,689,280,162,454,757,565,267,575,417,948,607,269,852,
                    938,560,24,222,580,604,800,628,487,485,615,796,384,555,226,412,445,503,810,949,966,28,768,83,213,883,963,831,390,951,378,497,440,780,209,734,290,96,398,146,56,445,
                    880,910,858,671,164,552,686,748,738,837,556,710,787,343,137,298,685,909,828,499,816,538,604,652,7,272,729,529,343,443,593,992,434,588,936,261,873,64,177,827,172,712,
                    628,609,328,672,376,628,441,9,92,525,222,654,699,134,506,934,178,270,770,994,158,653,199,833,802,553,399,366,818,523,447,420,957,669,267,118,535,971,180,469,768,184,
                    321,712,167,867,12,660,283,813,498,192,740,696,421,504,795,894,724,562,234,110,88,100,408,104,864,473,59,474,922,759,720,69,490,540,962,461,324,453,91,173,870,470,292,
                    394,771,161,777,287,560,532,339,301,90,411,387,59,67,828,775,882,677,9,393,128,910,630,396,77,321,642,568,817,222,902,680,596,359,639,189,436,648,825,46,699,967,202,954,
                    680,251,455,420,599,20,894,224,47,266,644,943,808,653,563,351,709,116,849,38,870,852,333,829,306,881,203,660,266,540,510,748,840,821,199,250,253,279,672,472,707,921,582,713,
                    900,137,70,912,51,250,188,967,14,608,30,541,424,813,343,297,346,27,774,549,931,141,81,120,342,288,332,967,768,178,230,378,800,408,272,596,560,942,612,910,743,461,425,878,254,
                    929,780,641,657,279,160,184,585,651,204,353,454,536,185,550,428,125,889,436,906,99,942,355,666,746,964,936,661,515,978,492,836,468,867,422,879,92,438,802,276,805,832,649,572,638,
                    43,971,974,804,66,100,792,878,469,585,254,630,309,172,361,906,628,219,534,617,95,190,541,93,477,933,328,984,117,678,746,296,232,240,532,643,901,982,342,918,884,62,68,835,173,493,
                    252,382,862,672,803,803,873,24,431,580,257,457,519,388,218,970,691,287,486,274,942,184,817,405,575,369,591,713,158,264,826,870,561,450,419,606,925,710,758,151,533,405,946,285,86,
                    346,685,153,834,625,745,925,281,805,99,891,122,102,874,491,64,277,277,840,657,443,492,880,925,65,880,393,504,736,340,64,330,318,703,949,950,887,956,39,595,764,176,371,215,601,435,
                    249,86,761,793,201,54,189,451,179,849,760,689,539,453,450,404,852,709,313,529,666,545,399,808,290,848,129,352,846,2,266,777,286,22,898,81,299,786,949,435,434,695,298,402,532,177,399,
                    458,528,672,882,90,547,690,935,424,516,390,346,702,781,644,794,420,116,24,919,467,543,58,938,217,502,169,457,723,122,158,188,109,868,311,708,8,893,853,376,359,223,654,895,877,709,940,
                    195,323,64,51,807,510,170,508,155,724,784,603,67,316,217,148,972,19,658,5,762,618,744,534,956,703,434,302,541,997,214,429,961,648,774,244,684,218,49,729,990,521,948,317,847,76,566,
                    415,874,399,613,816,613,467,191 },
            };
            for (int i = 0; i < ns.Length; i++)
            {
                var result = s.MinCostClimbingStairs(ns[i]);

                Console.WriteLine($"stairs=[{string.Join(",", ns[i].Take(30))}{(ns[i].Length > 30 ? "..." : "")}] min cost={result}");
            }
        }

        static void TestReverseEveryK()
        {
            var s = new ReverseEveryK();
            var ss = new[] {
                "abcdefg" ,
                "abcd",
                "a",
                "abcd",
                "abcdefg"

            };
            var k = new[] {
                2 ,
                2,
                2,
                4,
                8,
            };
            for (int i = 0; i < ss.Length; i++)
            {
                var answer = s.ReverseStr(ss[i], k[i]);
                var prettyInput = PrintUtils.ShortString4Print(ss[i]);
                var prettyAnswer = PrintUtils.ShortString4Print(answer);
                Console.WriteLine($"s='{prettyInput}', k='{k[i]}' reversed: '{prettyAnswer}'");
            }
        }

        static void TestSkyline()
        {
            var s = new Skyline();
            var ns = new[]
            {
                new[]
                {
                    new[] {1,4,4 },
                    new[] {2,5,3 },
                    new[] {3,6,2 },
                    new[] {4,9,1 },
                },
                new[]
                {
                    new[] {1,7,1 },
                    new[] {2,6,2 },
                    new[] {3,5,3 },
                },
                new[]
                {
                    new[] {2,7,3 },
                    new[] {3,6,2 },
                    new[] {4,5,1 },
                },
                new[]
                {
                    new[] {1,2,1 },
                    new[] {4,5,4 },
                },
                new[]
                {
                    new[] {1,2,1 },
                    new[] {2147483646,2147483647,2147483647 },
                },
                new[]
                {
                    new[] {2,14,4 },
                    new[] {4,8,8 },
                    new[] {6,16,4 },
                },
                new[]
                {
                    new[] { 0,2,3 },
                },
                new[]
                {
                    new[] { 2,9,10 },
                    new[] { 3,7,15 },
                    new[] { 5,12,12 },
                    new[] { 15,20,10 },
                    new[] { 19,24,8 },
                },
                new[]
                {
                    new[] { 0,2,3 },
                    new[] { 2,5,3 },
                }
            };
            for (int i = 0; i < ns.Length; i++)
            {
                Console.WriteLine($"building: {ns[i].TwoDimArrayToString()} skyline: {s.GetSkyline(ns[i]).TwoDimListToString()}");
            }
        }

        static void TestMaxPointsOnLine()
        {
            var s = new MaxPointsOnLine();
            var ns = new[]
            {
                new[]
                {
                    new[] { 1,1 },
                    new[] { 2,2 },
                    new[] { 3,3 },
                },
                new[]
                {
                    new[] { 1,1 },
                    new[] { 3,2 },
                    new[] { 5,3 },
                    new[] { 4,1 },
                    new[] { 2,3 },
                    new[] { 1,4 },
                }
            };
            for (int i = 0; i < ns.Length; i++)
            {
                Console.WriteLine($"plot points: {ns[i].TwoDimArrayToString()} max on line: {s.MaxPoints(ns[i])}");
            }
        }

        static void TestTrie()
        {
            Trie trie = new Trie();
            trie.Insert("apple");
            Console.WriteLine(trie.Search("apple"));   // return True
            Console.WriteLine(trie.Search("app"));     // return False
            Console.WriteLine(trie.StartsWith("app")); // return True
            trie.Insert("app");
            Console.WriteLine(trie.Search("app"));     // return True
        }

        static void TestLRUCache()
        {
            Console.WriteLine("#1");
            LRUCache lRUCache = new LRUCache(2);
            lRUCache.Put(1, 1); // cache is {1=1}
            lRUCache.Put(2, 2); // cache is {1=1, 2=2}
            Console.WriteLine(lRUCache.Get(1));    // return 1
            lRUCache.Put(3, 3); 
            Console.WriteLine(lRUCache.Get(2));    // returns -1 (not found)
            lRUCache.Put(4, 4);
            Console.WriteLine(lRUCache.Get(1));    // return -1 (not found)
            Console.WriteLine(lRUCache.Get(3));    // return 3
            Console.WriteLine(lRUCache.Get(4));    // return 4
            
            Console.WriteLine("\n#2");
            LRUCache lRUCache2 = new LRUCache(1);
            lRUCache2.Put(2, 1); 
            Console.WriteLine(lRUCache2.Get(2));    // return 1
            lRUCache2.Put(3, 2); 
            Console.WriteLine(lRUCache2.Get(2));    // returns -1 (not found)
            Console.WriteLine(lRUCache2.Get(3));    // returns 2
            
            Console.WriteLine("\n#3");
            LRUCache lRUCache3 = new LRUCache(2);
            Console.WriteLine(lRUCache3.Get(2));    // return -1
            lRUCache3.Put(2, 6);
            Console.WriteLine(lRUCache3.Get(1));    // return -1
            lRUCache3.Put(1, 5);
            lRUCache3.Put(1, 2);
            Console.WriteLine(lRUCache3.Get(1));    // return 2
            Console.WriteLine(lRUCache3.Get(2));    // return 6

            Console.WriteLine("\n#3");
            LRUCache lRUCache4 = new LRUCache(2);
            lRUCache4.Put(2, 1);
            lRUCache4.Put(2, 1);
            lRUCache4.Put(3, 2);
            Console.WriteLine(lRUCache4.Get(3));    // return 2
            Console.WriteLine(lRUCache4.Get(2));    // return 1
            Console.WriteLine(lRUCache4.Get(3));    // return 2
            Console.WriteLine(lRUCache4.Get(2));    // return 1
            Console.WriteLine(lRUCache4.Get(3));    // return 2
            Console.WriteLine(lRUCache4.Get(2));    // return 1
            Console.WriteLine(lRUCache4.Get(3));    // return 2
            Console.WriteLine(lRUCache4.Get(2));    // return 1
            Console.WriteLine(lRUCache4.Get(3));    // return 2
            Console.WriteLine(lRUCache4.Get(2));    // return 1
            Console.WriteLine(lRUCache4.Get(3));    // return 2
            Console.WriteLine(lRUCache4.Get(2));    // return 1
            Console.WriteLine(lRUCache4.Get(3));    // return 2
            Console.WriteLine(lRUCache4.Get(2));    // return 1
            Console.WriteLine(lRUCache4.Get(3));    // return 2
            Console.WriteLine(lRUCache4.Get(2));    // return 1
            lRUCache4.Put(4, 3);
            Console.WriteLine(lRUCache4.Get(3));    // return -1
            Console.WriteLine(lRUCache4.Get(3));    // return -1
            Console.WriteLine(lRUCache4.Get(3));    // return -1
            Console.WriteLine(lRUCache4.Get(4));    // return 3
            Console.WriteLine(lRUCache4.Get(4));    // return 3
            Console.WriteLine(lRUCache4.Get(4));    // return 3
        }

        static void TestWordBreak()
        {
            var s = new TheWordBreak();
            var ns = new[] {
                new List<string> { "leet","code" },
                new List<string> { "apple","pen" },
                new List<string> { "cats","dog","sand","and","cat" },
                new List<string> { "cats","dog","sand","and","cat" },
                new List<string> { "a","aa","aaa","aaaa","aaaaa","aaaaaa","aaaaaaa","aaaaaaaa","aaaaaaaaa","aaaaaaaaaa" },
            };
            var bws = new[] {
                "leetcode",
                "applepenapple",
                "catsandog",
                "catsdogsand",
                "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab",
            };
            for (int i = 0; i < ns.Length; i++)
            {
                Console.WriteLine($"vocab=[{string.Join(",", ns[i])}], string='{bws[i]}' can be broken: {s.WordBreak(bws[i], ns[i])}");
            }
        }

        static void TestBestTimeToBuySellStock()
        {
            var s = new BestTimeToBuySellStock();
            var ns = new[] {
                new[] { 1,7,2,4,11 },
                new[] { 6,1,3,2,4,7 },
                new[] { 1,4,2 },
                new[] { 1,2,3,0,2 },
                new[] {1},
                new[] {1,3,4,5,2,3,1,2,1,3,5,1,2,1,0},
                new[] {6,4,3,2,1,3,2,4,3,5,4,2,3,1,2,1,2,1,1,2,2},
                new[] {70,4,83,56,94,72,78,43,2,86,65,100,94,56,41,66,3,33,10,3,45,94,15,12,78,60,58,0,58,15,21,7,11,41,12,96,83,77,47,62,27,19,40,63,30,4,77,52,17,57,21,66,63,29,51,40,37,6,44,42,92,16,64,33,31,51,36,0,29,95,92,35,66,91,19,21,100,95,40,61,15,83,31,55,59,84,21,99,45,64,90,25,40,6,41,5,25,52,59,61,51,37,92,90,20,20,96,66,79,28,83,60,91,30,52,55,1,99,8,68,14,84,59,5,34,93,25,10,93,21,35,66,88,20,97,25,63,80,20,86,33,53,43,86,53,55,61,77,9,2,56,78,43,19,68,69,49,1,6,5,82,46,24,33,85,24,56,51,45,100,94,26,15,33,35,59,25,65,32,26,93,73,0,40,92,56,76,18,2,45,64,66,64,39,77,1,55,90,10,27,85,40,95,78,39,40,62,30,12,57,84,95,86,57,41,52,77,17,9,15,33,17,68,63,59,40,5,63,30,86,57,5,55,47,0,92,95,100,25,79,84,93,83,93,18,20,32,63,65,56,68,7,31,100,88,93,11,43,20,13,54,34,29,90,50,24,13,44,89,57,65,95,58,32,67,38,2,41,4,63,56,88,39,57,10,1,97,98,25,45,96,35,22,0,37,74,98,14,37,77,54,40,17,9,28,83,13,92,3,8,60,52,64,8,87,77,96,70,61,3,96,83,56,5,99,81,94,3,38,91,55,83,15,30,39,54,79,55,86,85,32,27,20,74,91,99,100,46,69,77,34,97,0,50,51,21,12,3,84,84,48,69,94,28,64,36,70,34,70,11,89,58,6,90,86,4,97,63,10,37,48,68,30,29,53,4,91,7,56,63,22,93,69,93,1,85,11,20,41,36,66,67,57,76,85,37,80,99,63,23,71,11,73,41,48,54,61,49,91,97,60,38,99,8,17,2,5,56,3,69,90,62,75,76,55,71,83,34,2,36,56,40,15,62,39,78,7,37,58,22,64,59,80,16,2,34,83,43,40,39,38,35,89,72,56,77,78,14,45,0,57,32,82,93,96,3,51,27,36,38,1,19,66,98,93,91,18,95,93,39,12,40,73,100,17,72,93,25,35,45,91,78,13,97,56,40,69,86,69,99,4,36,36,82,35,52,12,46,74,57,65,91,51,41,42,17,78,49,75,9,23,65,44,47,93,84,70,19,22,57,27,84,57,85,2,61,17,90,34,49,74,64,46,61,0,28,57,78,75,31,27,24,10,93,34,19,75,53,17,26,2,41,89,79,37,14,93,55,74,11,77,60,61,2,68,0,15,12,47,12,48,57,73,17,18,11,83,38,5,36,53,94,40,48,81,53,32,53,12,21,90,100,32,29,94,92,83,80,36,73,59,61,43,100,36,71,89,9,24,56,7,48,34,58,0,43,34,18,1,29,97,70,92,88,0,48,51,53,0,50,21,91,23,34,49,19,17,9,23,43,87,72,39,17,17,97,14,29,4,10,84,10,33,100,86,43,20,22,58,90,70,48,23,75,4,66,97,95,1,80,24,43,97,15,38,53,55,86,63,40,7,26,60,95,12,98,15,95,71,86,46,33,68,32,86,89,18,88,97,32,42,5,57,13,1,23,34,37,13,65,13,47,55,85,37,57,14,89,94,57,13,6,98,47,52,51,19,99,42,1,19,74,60,8,48,28,65,6,12,57,49,27,95,1,2,10,25,49,68,57,32,99,24,19,25,32,89,88,73,96,57,14,65,34,8,82,9,94,91,19,53,61,70,54,4,66,26,8,63,62,9,20,42,17,52,97,51,53,19,48,76,40,80,6,1,89,52,70,38,95,62,24,88,64,42,61,6,50,91,87,69,13,58,43,98,19,94,65,56,72,20,72,92,85,58,46,67,2,23,88,58,25,88,18,92,46,15,18,37,9,90,2,38,0,16,86,44,69,71,70,30,38,17,69,69,80,73,79,56,17,95,12,37,43,5,5,6,42,16,44,22,62,37,86,8,51,73,46,44,15,98,54,22,47,28,11,75,52,49,38,84,55,3,69,100,54,66,6,23,98,22,99,21,74,75,33,67,8,80,90,23,46,93,69,85,46,87,76,93,38,77,37,72,35,3,82,11,67,46,53,29,60,33,12,62,23,27,72,35,63,68,14,35,27,98,94,65,3,13,48,83,27,84,86,49,31,63,40,12,34,79,61,47,29,33,52,100,85,38,24,1,16,62,89,36,74,9,49,62,89},
                new[] {106,373,495,46,359,919,906,440,783,583,784,73,238,701,972,308,165,774,990,675,737,990,713,157,211,880,961,132,980,136,285,239,628,221,948,939,28,541,414,180,171,640,297,873,59,814,832,611,868,633,101,67,396,264,445,548,257,656,624,71,607,67,836,14,373,205,434,203,661,793,45,623,140,67,177,885,155,764,363,269,599,32,228,111,102,565,918,592,604,244,982,533,781,604,115,429,33,894,778,885,145,888,577,275,644,824,277,302,182,94,479,563,52,771,544,794,964,827,744,366,548,761,477,434,999,86,1000,5,99,311,346,609,778,937,372,793,754,191,592,860,748,297,610,386,146,220,7,113,657,438,482,700,158,884,877,964,777,139,809,489,383,92,581,970,899,947,864,443,490,825,674,906,402,270,416,611,949,476,775,899,837,796,227,232,226,11,266,889,215,6,182,430,5,706,994,128,359,841,439,263,491,689,638,485,763,695,135,800,763,54,569,387,112,316,193,675,546,531,954,571,208,282,557,892,469,875,765,592,374,276,892,843,625,180,249,292,477,882,837,112,46,667,187,93,418,790,903,12,978,510,647,446,597,958,678,897,420,907,256,170,669,920,711,635,995,259,994,634,583,175,380,435,942,739,921,132,455,986,567,464,301,10,579,84,745,717,588,414,375,319,770,310,510,521,88,445,59,460,120,765,480,441,169,374,180,947,179,346,490,417,149,140,577,624,427,238,341,686,623,228,672,859,372,938,567,141,133,671,255,997,272,591,115,340,692,531,235,123,677,980,31,774,135,194,956,723,779,375,546,59,695,616,416,362,38,145,782,184,418,806,444,177,360,485,941,998,85,840,740,545,49,570,17,824,845,749,177,727,238,656,787,425,473,323,683,578,442,436,444,595,367,44,467,93,507,949,598,579,471,1,347,982,232,878,217,845,777,284,527,529,100,482,456,814,457,251,494,419,922,139,706,384,954,365,680,70,810,764,820,992,622,29,697,294,553,655,63,934,827,157,680,812,729,486,403,151,988,926,460,193,294,423,774,715,906,957,598,929,339,119,686,88,228,803,806,743,430,315,224,712,724,69,606,411,271,700,520,179,916,490,652,319,69,245,827,185,200,911,363,335,50,353,551,737,15,429,966,766,307,829,379,184,779,239,254,904,262,719,321,380,253,564,348,878,570,470,313,752,563,164,301,239,856,491,154,795,640,199,940,420,201,254,400,865,886,819,424,292,257,572,112,590,984,421,639,705,707,779,660,4,817,265,465,737,56,564,797,178,552,988,621,98,665,379,607,300,439,269,196,94,860,540,830,756,294,806,321,930,623,206,440,730,829,566,420,488,49,438,447,294,548,804,514,45,383,431,373,424,11,377,868,559,316,831,464,211,710,803,680,665,39,523,951,219,293,909,838,708,663,627,220,100,565,269,982,236,185,194,697,556,767,541,360,103,497,271,919,19,206,73,393,50,421,466,970,329,105,618,17,687,578,260,759,366,334,686,613,616,893,351,847,861,452,454,454,88,135,357,194,220,504,36,916,246,718,172,395,292,613,533,662,983,701,877,842,445,263,529,679,526,31,385,918,898,584,846,474,648,67,331,890,174,766,274,476,414,701,835,537,531,578,7,479,906,93,667,735,435,899,49,953,854,843,326,322,13,865,791,828,686,760,957,655,601,406,185,738,788,519,874,630,440,839,511,149,715,566,988,0,354,498,81,193,335,196,157,515,590,768,366,287,386,502,143,547,659,616,822,479,813,497,222,285,6,453,363,906,388,733,804,624,963,634,319,817,674,754,378,999,373,793,419,246,274,960,1,130,186,576,382,204,227,607,435,299,790,603,196,236,955,654,812,214,297,926,721,977,568,339,913,297,621,783,242,257,483,325,998,164,586,782,597,210,522,369,676,339,626,650,634,477,793,85,12,695,655,53,287,730,0,689,225,805,593,430,610,963,172,148,740,579,16,523,570,802,627,220,664,945,788,500,90,410,916,481,454,538,622,161,373,523,757,446,855,958,390,333,927,253,814,442,77,325,14,655,502,200,791,58,714,951,370,557,261,859,199,46,775,249,369,233,321,733,310,503,539,618,839,272,315,999,229,390,359,528,334,878,342,977,869,704,564,506,867,77,248,674,557,258,710,126,617,531,969,289,578,947,103,581,599,918,686,143,253,56,393,58,144,211,806,285,635,203,194,884,687,653,856,688,623,568,394,749,302,534,631,894,167,111,227,296,41,854,81,147,656,319,748,530,457,340,223,896,77,166,974,659,36,338,177,496,483,690,569,504,211,554,758,732,660,61,62,669,273,0,616,899,789,380,386,357,403,251,926,636,419,148,820,774,485,497,370,907,973,255,277,341,466,254,333,219,819,521,974,213,590,981,697,927,904,717,726,574,94,625,991,378,249,388,786,355,69,318,357,467,695,825,585,940,323,993,549,485,564,833,530,398,789,608,59,541,915,81,681,544,460,318,954,764,879,708,258,276,259,505,649,529,824,914,660,490,666,676,618,339,712,981,802,239,605,270,29,491,41,243,361,644,327,472,460,725,864,129,142,610,782,935,929,63,865,287,316,740,212,152,567,620,591,394,805,586,177,918,516,911,944,427,128,778,930,965,27,633,534,567,575,247,691,571,775,456,622,219,698,772,305,27,810,690,555,222,877,985,493,202,84,180,133,129,539,151,275,234,999,676,629,715,839,6,789,663,467,435,275,580,296,8,73,849,456,681,794,954,543,602,615,4,131,593,778,175,587,670,88,648,79,703,99,457,261,722,357,966,724,523,612,610,376,575,174,2,53,637,478,850,250,238,344,381,543,686,761,582,598,804,12,128,928,133,998,188,598,590,507,898,402,771,703,912,744,317,300,852,631,767,157,278,520,452,721,560,112,206,69,317,498,942,942,963,347,61,186,390,128,946,462,230,551,956,195,960,143,225,654,255,370,778,770,487,192,479,180,505,509,508,717,976,826,346,521,472,148,965,965,971,421,402,233,76,543,533,815,281,986,638,936,139,754,728,779,551,425,17,546,516,862,963,648,127,510,453,311,759,654,550,755,654,567,129,34,927,900,421,961,923,117,766,71,132,680,917,460,609,874,179,336,496,287,61,846,228,871,590,858,404,646,449,770,724,245,634,900,496,157,864,407,632,998,596,451,482,921,102,624,148,346,282,624,150,523,598,492,267,54,889,872,979,38,1,282,513,877,798,994,400,254,435,487,707,459,575,275,297,165,104,468,80,820,571,215,869,381,107,209,762,455,415,810,137,674,304,692,639,304,534,348,938,575,432,471,74,631,291,405,622,352,58,549,832,655,458,688,468,827,447,946,181,908,585,53,905,733,363,210,536,960,577,815,462,193,31,731,8,538,695,936,795,139,782,357,52,492,610,512,544,323,276,649,940,54,749,723,544,365,500,441,284,17,660,748,871,701,591,356,64,34,422,713,978,96,218,756,833,177,832,61,91,764,510,188,415,622,473,549,944,716,998,528,61,829,953,280,284,706,323,981,405,91,887,568,874,725,236,933,41,895,940,375,468,314,667,694,609,631,621,655,640,835,513,461,854,419,455,860,912,572,769,963,213,818,158,840,699,414,969,430,59,855,997,997,884,349,723,837,488,430,671,743,943,310,399,884,423,486,587,491,106,716,0,768,704,483,663,827,587,915,904,742,976,6,455,221,849,920,548,156,35,101,270,684,123,549,649,977,711,965,492,525,130,744,697,910,699,301,285,696,313,117,122,777,163,789,924,543,446,60,214,102,97,45,670,960,23,522,680,178,757,792,633,244,327,129,188,357,733,419,496,774,408,90,615,663,321,526,946,990,273,135,373,719,870,810,798,826,64,971,156,233,587,253,712,384,964,173,511,116,291,639,450,947,623,656,548,605,498,709,143,895,739,663,160,442,820,802,380,413,356,742,744,764,421,355,499,614,678,336,850,1000,463,794,388,478,188,576,822,164,209,465,901,116,729,891,952,611,15,798,731,711,6,459,587,278,996,220,642,563,363,271,16,379,959,332,315,414,659,602,786,571,78,450,544,393,404,953,480,215,771,419,8,738,36,191,138,204,146,923,413,908,998,46,928,678,425,584,372,689,245,721,177,833,44,784,121,164,16,714,680,974,685,340,810,101,301,791,716,697,768,33,901,994,417,353,248,559,807,64,450,724,896,889,880,818,89,495,848,915,450,409,958,413,149,743,782,64,687,196,737,769,311,429,598,585,690,919,331,94,211,633,888,856,844,870,931,934,66,407,121,902,417,522,423,821,196,625,855,830,673,463,181,857,775,374,490,971,751,835,823,770,79,916,80,829,810,856,674,524,352,251,548,899,363,465,0,989,322,51,86,740,542,920,310,365,677,287,688,373,225,774,331,430,482,630,46,567,236,370,502,347,191,137,646,218,634,399,278,423,540,26,612,700,43,508,176,268,525,267,676,257,651,88,349,556,6,463,29,410,753,224,693,535,747,40,854,155,376,192,434,12,342,98,718,639,951,205,923,354,564,988,960,676,965,29,104,898,535,915,868,768,269,294,944,523,145,895,382,53,935,671,518,338,623,524,204,146,900,161,258,739,417,119,825,336,182,123,749,355,188,109,740,945,826,921,123,65,69,682,461,259,661,247,523,796,153,142,851,411,536,190,478,417,296,113,158,263,754,532,368,748,42,890,129,643,717,564,525,5,348,204,383,427,696,861,684,902,591,609,467,837,104,565,168,828,916,645,232,153,794,384,642,753,550,176,142,132,141,192,635,14,634,329,403,790,460,29,512,443,15,74,114,456,487,303,13,822,429,136,113,637,283,542,519,411,564,220,346,907,389,780,479,480,179,385,285,445,393,508,885,697,168,542,357,553,149,710,126,508,271,845,689,231,217,984,848,905,87,168,1000,169,336,672,595,501,411,81,707,708,634,150,722,379,77,762,737,585,419,428,37,869,509,222,335,192,980,209,883,864,215,497,992,155,408,652,927,990,708,439,857,934,838,69,140,713,573,939,338,628,685,412,147,530,643,471,545,58,111,132,665,572,38,176,460,555,997,61,602,471,901,620,830,577,436,495,685,619,600,549,270,77,512,249,697,466,864,336,981,901,573,702,694,937,299,565,436,613,187,377,364,473,405,384,280,658,561,85,987,302,856,107,191,486,464,165,514,948,227,310,133,799,363,481,289,153,990,445,246,454,729,887,980,546,730,528,817,521,437,376,238,965,511,995,432,227,883,550,904,818,556,295,413,786,861,248,113,660,982,445,292,562,722,433,621,783,375,53,236,856,275,898,532,915,804,362,545,373,397,740,453,726,983,665,715,379,176,408,3,911,573,883,195,254,469,758,844,355,409,562,307,752,274,105,227,635,121,335,338,46,993,243,567,765,589,806,405,558,25,246,526,490,306,295,112,847,792,759,881,500,398,791,266,33,372,546,217,286,898,596,955,720,70,9,458,698,367,936,134,95,887,300,975,72,235,77,870,943,511,883,923,619,812,904,990,643,871,346,588,807,957,681,581,195,82,448,146,807,559,21,412,950,536,681,541,856,631,378,258,736,116,580,20,606,748,537,343,681,22,711,628,536,395,422,874,135,519,294,876,185,583,392,253,220,80,341,203,970,825,762,558,942,797,651,290,8,414,375,913,167,977,94,706,970,286,278,349,909,422,887,921,492,467,550,538,555,841,446,199,312,816,562,296,609,39,393,240,763,222,828,802,944,714,325,334,936,995,950,487,433,195,370,498,926,109,543,885,463,687,171,703,985,292,123,314,174,183,588,487,857,63,736,126,156,172,367,313,672,494,56,202,470,821,735,72,812,282,570,756,633,82,52,920,300,199,927,534,214,354,764,84,419,462,5,246,787,305,788,852,58,698,241,184,904,533,333,857,215,531,81,862,567,56,773,741,169,982,965,302,724,145,342,731,184,914,977,933,727,918,420,438,491,300,104,107,730,506,214,214,968,351,66,844,965,758,845,503,495,503,208,281,622,905,49,751,660,268,420,360,354,971,441,565,513,711,283,695,109,432,127,399,177,640,67,77,364,327,943,1000,979,278,526,222,929,120,753,580,743,456,241,148,339,599,919,11,473,101,365,789,465,819,778,134,278,89,598,801,904,681,695,599,43,897,763,193,257,719,410,610,58,72,912,598,793,347,640,725,855,390,754,785,70,449,24,962,843,735,729,893,797,512,390,57,474,336,855,970,389,722,735,464,28,894,664,645,96,357,255,117,795,479,151,790,432,748,780,940,255,204,607,999,989,48,139,945,783,736,826,640,597,171,423,457,972,424,419,140,706,333,648,557,155,707,547,337,66,338,818,829,972,13,500,310,961,668,991,407,386,893,589,308,129,739,689,452,361,822,418,606,961,981,385,132,7,938,102,942,534,154,133,921,51,257,205,281,771,215,508,816,466,744,85,141,163,418,894,386,779,142,137,825,556,764,647,414,792,605,945,36,427,173,907,356,893,875,449,621,181,963,801,14,502,234,495,437,86,635,846,182,182,540,340,648,772,195,93,539,716,573,431,342,989,156,745,436,709,22,532,100,504,0,985,838,461,725,555,219,710,568,914,736,791,507,615,442,494,977,546,519,389,614,78,172,991,255,154,243,495,876,267,948,657,692,46,107,864,168,785,965,740,16,878,713,79,517,68,208,621,13,362,99,379,109,823,960,645,440,944,342,710,267,656,646,639,453,155,867,456,606,328,444,136,89,104,650,36,240,320,31,352,522,520,260,510,981,591,655,668,23,544,320,541,707,133,708,809,972,196,59,383,642,153,993,837,98,300,751,564,399,848,325,903,534,662,201,690,300,404,115,104,600,236,752,651,640,244,254,40,549,304,86,600,755,59,662,106,290,368,725,138,705,28,550,955,277,959,346,721,759,569,420,424,59,989,438,867,725,544,178,575,137,21,536,72,617,194,421,226,378,483,880,688,791,930,97,831,113,711,445,308,813,967,120,769,329,718,899,364,638,308,644,25,138,88,732,922,721,850,835,367,831,292,651,966,268,628,925,205,824,429,917,534,323,887,3,302,134,904,300,678,929,491,229,671,817,442,678,879,373,664,990,53,395,738,570,497,113,322,557,341,641,331,932,830,433,590,738,780,50,446,504,743,311,980,88,224,732,316,664,742,69,146,801,334,41,198,629,690,869,598,612,662,385,637,769,984,316,741,980,2,794,814,730,297,503,734,836,604,674,376,692,277,727,455,975,703,115,25,552,404,460,543,738,86,488,356,929,668,835,222,413,172,221,1000,30,888,350,514,908,870,323,991,201,738,335,189,437,604,316,514,575,531,514,318,43,592,594,9,773,609,952,708,868,291,962,572,772,291,214,992,238,275,36,882,631,376,150,838,376,862,996,258,545,331,907,958,925,503,1,745,559,147,617,487,185,623,287,658,340,84,835,563,168,845,401,395,928,277,136,890,276,45,806,121,264,416,417,596,208,106,738,352,995,746,731,72,258,112,885,445,165,74,847,633,343,721,237,20,91,575,410,765,274,233,738,893,999,283,104,414,981,448,761,47,48,725,459,265,318,564,353,260,896,874,563,492,710,336,952,80,195,326,311,716,167,561,556,234,680,631,112,573,248,422,130,219,134,75,722,188,221,238,193,689,63,787,657,956,214,895,657,169,349,575,577,869,64,325,187,471,535,572,39,872,966,22,232,427,501,855,239,487,263,335,645,461,973,447,923,922,788,286,610,55,708,827,250,355,481,379,322,926,796,815,2,952,268,257,61,795,364,999,535,494,664,619,711,228,411,587,292,345,671,640,231,384,859,88,640,838,904,27,235,605,766,887,23,438,816,764,91,12,324,709,411,659,405,927,769,505,259,383,714,333,652,648,663,604,596,231,114,320,955,689,626,495,758,96,848,43,189,848,656,114,475,349,148,995,467,94,519,141,125,598,738,822,701,194,46,936,332,370,764,944,711,889,568,508,186,981,48,400,69,182,698,25,526,808,272,963,451,335,883,718,199,185,437,81,987,4,274,482,263,509,584,767,141,53,365,14,657,712,837,161,378,525,313,685,183,869,202,382,339,351,686,15,667,636,756,553,848,57,740,862,962,838,410,722,409,589,891,370,520,790,880,276,478,26,459,671,728,301,296,75,194,173,116,938,933,977,812,863,868,286,973,984,265,631,456,436,683,28,126,319,285,62,247,88,60,824,710,26,602,897,765,998,610,138,773,555,153,114,932,21,111,171,282,246,909,419,647,781,166,966,200,521,188,808,295,685,1000,890,353,301,983,862,527,974,241,705,437,523,213,704,421,225,428,310,255,719,243,962,757,27,476,181,138,95,309,122,500,846,627,371,470,759,255,373,520,748,856,459,71,431,782,307,524,644,130,120,56,406,387,435,201,7,392,922,503,578,331,827,954,21,351,869,65,300,697,908,505,315,198,744,892,510,307,985,129,634,773,343,640,702,748,973,594,271,151,254,513,339,843,425,153,19,309,489,333,944,442,904,447,239,487,6,230,988,656,716,488,779,362,738,663,516,432,964,142,823,353,175,797,645,613,553,26,41,946,47,479,181,964,901,251,843,715,211,366,335,16,103,547,171,276,29,165,993,424,274,334,754,982,63,963,904,150,342,301,238,152,314,892,498,958,192,806,208,681,703,970,688,5,809,705,182,230,658,531,793,303,475,825,924,538,488,100,655,524,569,655,430,808,820,402,852,760,691,751,779,868,247,688,545,780,350,400,550,307,577,803,527,302,916,984,829,257,172,392,41,233,241,587,159,176,904,926,540,324,918,177,817,585,722,89,987,476,637,210,980,905,911,547,762,490,197,718,774,982,484,781,675,152,144,412,255,800,480,901,892,309,382,873,469,662,375,499,646,436,410,866,440,708,613,842,663,604,555,133,77,458,66,660,504,635,896,621,126,995,506,7,283,11,610,11,727,667,101,589,309,240,508,368,830,805,4,259,936,39,510,645,772,993,530,932,393,19,82,915,994,853,683,183,797,61,292,942,434,846,265,316,991,751,579,182,162,454,5,194,97,451,906,177,761,988,314,425,5,63,127,565,427,774,66,195,627,731,750,586,874,599,878,759,807},
            };
            for (int i = 0; i < ns.Length; i++)
            {

                var timestart = DateTime.UtcNow;
                var result = s.MaxProfit(ns[i]);
                var timeEnd = DateTime.UtcNow;

                Console.WriteLine($"prices/day=[{string.Join(",", ns[i].Take(30))}{(ns[i].Length > 30 ? "..." : "")}] max profit={result} (runtime: {(timeEnd - timestart).TotalMilliseconds})");
            }
        }

        static void TestRemoveAllInvalidParentheses()
        {
            var vp = new RemoveAllInvalidParentheses();
            var ps = new[]{
                "()())()",
                "(a)())()",
                ")(", 
                "x("
            };
            foreach (var p in ps)
            {
                var results = vp.RemoveInvalidParentheses(p);
                Console.WriteLine($"'{p}' : ['{string.Join("'], ['", results)}']");
            }
        }

        static void TestBinTreeLowestCommonAncestor()
        {
            var vp = new BinTreeLowestCommonAncestor();

            var n11 = new TreeNode()
            {
                val = 5,
                left = new TreeNode()
                {
                    val = 6
                },
                right = new TreeNode()
                {
                    val = 2,
                    left = new TreeNode()
                    {
                        val = 7
                    },
                    right = new TreeNode()
                    {
                        val = 4
                    }
                }
            };
            var n12 = new TreeNode()
            {
                val = 1,
                left = new TreeNode()
                {
                    val = 0
                },
                right = new TreeNode()
                {
                    val = 8
                }
            };

            var n22 = new TreeNode()
            {
                val = 4
            };
            var n21 = new TreeNode()
            {
                val = 5,
                left = new TreeNode()
                {
                    val = 6
                },
                right = new TreeNode()
                {
                    val = 2,
                    left = new TreeNode()
                    {
                        val = 7
                    },
                    right = n22
                }
            };

            var n32 = new TreeNode()
            {
                val = 2,
            };
            var n31 = new TreeNode()
            {
                val = 1,
                left = n32
            };

            var n42 = new TreeNode()
            {
                val = 1,
            };
            var n41 = new TreeNode()
            {
                val = 2,
                right = n42
            };

            var n51 = new TreeNode()
            {
                val = 8,
            };
            var n52 = new TreeNode()
            {
                val = 4,
            };

            (var nb, var pb, var qb) = TestInputGenerator.GenerateLeftHandMatrix(0, 10000);
            (var nbb, var pbb, var qbb) = TestInputGenerator.GenerateRightHandMatrix(0, 10000);

            var rs = new[]
            {
                new TreeNode()
                {
                    val = 3,
                    left = n11,
                    right = n12
                },
                
                new TreeNode()
                {
                    val = 3,
                    left = n21,
                    right = new TreeNode()
                    {
                        val = 1,
                        left = new TreeNode()
                        {
                            val = 0
                        },
                        right = new TreeNode()
                        {
                            val = 8
                        }
                    }
                },
                
                n31,
                n41,
                
                new TreeNode()
                {
                    val = -1,
                    left = new TreeNode()
                    {
                        val = 0,
                        left = new TreeNode()
                        {
                            val = -2,
                            left = n51
                        },
                        right = n52
                    },
                    right = new TreeNode()
                    {
                        val = 3,
                    }
                },

                //nb,
                //nbb,
            };

            var ps = new[]
            {
                n11,
                n21,
                n31,
                n41,
                n51,
                //pb,
                //pbb,
            };

            var qs = new[]
            {
                n12,
                n22,
                n32,
                n42,
                n52,
                //qb,
                //qbb,
            };

            for (int i = 0; i < rs.Length; i++)
            {

                var r = rs[i];
                var p = ps[i];
                var q = qs[i];
                var timestart = DateTime.UtcNow;
                var result = vp.LowestCommonAncestor(r, p, q);
                var timeEnd = DateTime.UtcNow;
                Console.WriteLine($"tree =\n{PrintUtils.ShortString4Print(r.ToString())}, p={p.val}, q={q.val}, lowest common ancestor = {result} ({result.val})  (runtime: {(timeEnd - timestart).TotalMilliseconds})");
            }
        }

        static void TestWordLadder()
        {
            var s = new WordLadder();
            var ns = new[] {
                new[] { "hot","dot","dog","lot","log","cog" },
                new[] { "hot","dot","dog","lot","log" },
                new[] { "a","b","c" },
                new[] { "si","go","se","cm","so","ph","mt","db","mb","sb","kr","ln","tm","le",
                    "av","sm","ar","ci","ca","br","ti","ba","to","ra","fa","yo","ow","sn","ya",
                    "cr","po","fe","ho","ma","re","or","rn","au","ur","rh","sr","tc","lt","lo",
                    "as","fr","nb","yb","if","pb","ge","th","pm","rb","sh","co","ga","li","ha",
                    "hz","no","bi","di","hi","qa","pi","os","uh","wm","an","me","mo","na","la","st",
                    "er","sc","ne","mn","mi","am","ex","pt","io","be","fm","ta","tb","ni","mr","pa","he","lr","sq","ye" },
                new[] { "kid", "tag", "pup", "ail", "tun", "woo", "erg", "luz", "brr", "gay", "sip", "kay", "per", "val", "mes", "ohs", 
                    "now", "boa", "cet", "pal", "bar", "die", "war", "hay", "eco", "pub", "lob", "rue", "fry", "lit", "rex", "jan", "cot", 
                    "bid", "ali", "pay", "col", "gum", "ger", "row", "won", "dan", "rum", "fad", "tut", "sag", "yip", "sui", "ark", "has", 
                    "zip", "fez", "own", "ump", "dis", "ads", "max", "jaw", "out", "btu", "ana", "gap", "cry", "led", "abe", "box", "ore",
                    "pig", "fie", "toy", "fat", "cal", "lie", "noh", "sew", "ono", "tam", "flu", "mgm", "ply", "awe", "pry", "tit", "tie", 
                    "yet", "too", "tax", "jim", "san", "pan", "map", "ski", "ova", "wed", "non", "wac", "nut", "why", "bye", "lye", "oct", 
                    "old", "fin", "feb", "chi", "sap", "owl", "log", "tod", "dot", "bow", "fob", "for", "joe", "ivy", "fan", "age", "fax", 
                    "hip", "jib", "mel", "hus", "sob", "ifs", "tab", "ara", "dab", "jag", "jar", "arm", "lot", "tom", "sax", "tex", "yum",
                    "pei", "wen", "wry", "ire", "irk", "far", "mew", "wit", "doe", "gas", "rte", "ian", "pot", "ask", "wag", "hag", "amy",
                    "nag", "ron", "soy", "gin", "don", "tug", "fay", "vic", "boo", "nam", "ave", "buy", "sop", "but", "orb", "fen", "paw", 
                    "his", "sub", "bob", "yea", "oft", "inn", "rod", "yam", "pew", "web", "hod", "hun", "gyp", "wei", "wis", "rob", "gad", 
                    "pie", "mon", "dog", "bib", "rub", "ere", "dig", "era", "cat", "fox", "bee", "mod", "day", "apr", "vie", "nev", "jam", 
                    "pam", "new", "aye", "ani", "and", "ibm", "yap", "can", "pyx", "tar", "kin", "fog", "hum", "pip", "cup", "dye", "lyx", 
                    "jog", "nun", "par", "wan", "fey", "bus", "oak", "bad", "ats", "set", "qom", "vat", "eat", "pus", "rev", "axe", "ion", 
                    "six", "ila", "lao", "mom", "mas", "pro", "few", "opt", "poe", "art", "ash", "oar", "cap", "lop", "may", "shy", "rid", 
                    "bat", "sum", "rim", "fee", "bmw", "sky", "maj", "hue", "thy", "ava", "rap", "den", "fla", "auk", "cox", "ibo", "hey", 
                    "saw", "vim", "sec", "ltd", "you", "its", "tat", "dew", "eva", "tog", "ram", "let", "see", "zit", "maw", "nix", "ate", 
                    "gig", "rep", "owe", "ind", "hog", "eve", "sam", "zoo", "any", "dow", "cod", "bed", "vet", "ham", "sis", "hex", "via",
                    "fir", "nod", "mao", "aug", "mum", "hoe", "bah", "hal", "keg", "hew", "zed", "tow", "gog", "ass", "dem", "who", "bet", 
                    "gos", "son", "ear", "spy", "kit", "boy", "due", "sen", "oaf", "mix", "hep", "fur", "ada", "bin", "nil", "mia", "ewe", "hit", "fix", "sad", "rib", "eye", "hop", 
                    "haw", "wax", "mid", "tad", "ken", "wad", "rye", "pap", "bog", "gut", "ito", "woe", "our", "ado", "sin", "mad", "ray", "hon", "roy", "dip", "hen", "iva", "lug", 
                    "asp", "hui", "yak", "bay", "poi", "yep", "bun", "try", "lad", "elm", "nat", "wyo", "gym", "dug", "toe", "dee", "wig", "sly", "rip", "geo", "cog", "pas", "zen", 
                    "odd", "nan", "lay", "pod", "fit", "hem", "joy", "bum", "rio", "yon", "dec", "leg", "put", "sue", "dim", "pet", "yaw", "nub", "bit", "bur", "sid", "sun", "oil", 
                    "red", "doc", "moe", "caw", "eel", "dix", "cub", "end", "gem", "off", "yew", "hug", "pop", "tub", "sgt", "lid", "pun", "ton", "sol", "din", "yup", "jab", "pea", "bug", 
                    "gag", "mil", "jig", "hub", "low", "did", "tin", "get", "gte", "sox", "lei", "mig", "fig", "lon", "use", "ban", "flo", "nov", "jut", "bag", "mir", "sty", "lap", "two", "ins", 
                    "con", "ant", "net", "tux", "ode", "stu", "mug", "cad", "nap", "gun", "fop", "tot", "sow", "sal", "sic", "ted", "wot", "del", "imp", "cob", "way", "ann", "tan", "mci", "job",
                    "wet", "ism", "err", "him", "all", "pad", "hah", "hie", "aim", "ike", "jed", "ego", "mac", "baa", "min", "com", "ill", "was", "cab", "ago", "ina", "big", "ilk", "gal", "tap", 
                    "duh", "ola", "ran", "lab", "top", "gob", "hot", "ora", "tia", "kip", "han", "met", "hut", "she", "sac", "fed", "goo", "tee", "ell", "not", "act", "gil", "rut", "ala", "ape", 
                    "rig", "cid", "god", "duo", "lin", "aid", "gel", "awl", "lag", "elf", "liz", "ref", "aha", "fib", "oho", "tho", "her", "nor", "ace", "adz", "fun", "ned", "coo", "win", "tao", "coy",
                    "van", "man", "pit", "guy", "foe", "hid", "mai", "sup", "jay", "hob", "mow", "jot", "are", "pol", "arc", "lax", "aft", "alb", "len", "air", "pug", "pox", "vow", "got", "meg", "zoe", 
                    "amp", "ale", "bud", "gee", "pin", "dun", "pat", "ten", "mob" }
            };
            var bws = new[] {
                "hit",
                "hit",
                "a",
                "qa",
                "cet"
            };
            var ews = new[] {
                "cog",
                "cog",
                "c",
                "sq",
                "ism"
            };
            for (int i = 0; i < ns.Length; i++)
            {
                Console.WriteLine($"vocab=[{string.Join(",", ns[i])}], beg word='{bws[i]}', end word='{ews[i]}' path len: {s.LadderLength(bws[i], ews[i], ns[i])}");
            }
        }

        static void TestCopyListWRandomPointer()
        {
            var vp = new CopyListWRandomPointer();

            var n11 = new Node(7);
            var n12 = new Node(13);
            var n13 = new Node(11);
            var n14 = new Node(10);
            var n15 = new Node(1);
            n11.next = n12;
            n12.next = n13;
            n13.next = n14;
            n14.next = n15;
            n12.random = n11;
            n13.random = n15;
            n14.random = n13;
            n15.random = n11;

            var n21 = new Node(1);
            var n22 = new Node(2);
            n21.next = n22;
            n21.random = n22;
            n22.random = n22;

            var n31 = new Node(3);
            var n32 = new Node(3);
            var n33 = new Node(3);
            n31.next = n32;
            n32.next = n33;
            n32.random = n31;

            var n41 = new Node(-1);
            n41.random = n41;

            var ps = new[]
            {
                n11,
                n21,
                n31,
                n41,
                new Node(1),
                null
            };
            foreach (var p in ps)
            {
                Console.WriteLine($"list = {p}\ncopy = {vp.CopyRandomList(p)}");
            }
        }

        static void TestGameOfLife()
        {
            var s = new TheGameOfLife();
            var ns = new[]
            {
                new[]
                {
                    new[] { 0,1,0 },
                    new[] { 0,0,1 },
                    new[] { 1,1,1 },
                    new[] { 0,0,0 },
                },
                new[]
                {
                    new[] { 1,1 },
                    new[] { 1,0 },
                }
            };
            for (int i = 0; i < ns.Length; i++)
            {
                Console.WriteLine($"board before:{ns[i].TwoDimArrayToString()}");
                s.GameOfLife(ns[i]);
                Console.WriteLine($"board after:{ns[i].TwoDimArrayToString()}\n");
            }
        }

        static void TestFindDuplicateNumberBetween1AndN()
        {
            var msa = new FindDuplicateNumberBetween1AndN();
            var ps1 = new[] {
                new[] {1,3,4,2,2},
                new[] {3,1,3,4,2},
                new[] {1,2,3,4,5,4,6},
                new[] {6,1,3,7,4,2,10,9,8,2,5},
                new[] {6,1,3,7,4,2,10,9, 2, 8,5},
                new[] {6,1,2,7,4,2,10,9,8,2,5},
            };
            for (int i = 0; i < ps1.Length; i++)
            {
                var timestart = DateTime.UtcNow;
                var answer = msa.FindDuplicate(ps1[i]);
                var timeEnd = DateTime.UtcNow;
                Console.WriteLine($"array:[{string.Join(",", ps1[i].Take(30))}{(ps1[i].Length > 30 ? "..." : "")}] duplicate: {answer} (runtime: {(timeEnd - timestart).TotalMilliseconds})");
            }
        }

        static void TestLongestPalindromicSubstring()
        {
            var s = new LongestPalindromicSubstring();
            var ss = new[] {
                "babad" ,
                "cbbd",
                "aaabaaaa",
                "caaabaaaa",
                "aaabaaaac",
                "abaa",
                "aaba",
                "madam",
                "cbdbcacbdbcayyyy",
                "racecar",
                "aaaaa",
                "aaaa",
                "aaa",
                "aa",
                "a",
                "racecarfghjkvbnmtyui",
                "qracecarfghjkvbnmtyui",
                "rtyuivbghnjmkhjracecar",
                "rtyuivbghnjmkhjracecarw",
                "noon",
                "noonahddfghrtyuighjk",
                "wnoonahddfghrtyuighjk",
                "asdasdasdasdasdasnoonq",
                "asdasdasdasdasdasnoon",
                "asdasdasdsqwenoonbvbfbweaf",
                "rjufvjafbracecarnbgriwgokdgqdqewn",
                TestInputGenerator.GenerateHugeStringOfRandomChars(5000000, 'a', 'z'),
                TestInputGenerator.GenerateHugeStringOfSameChars(5000000, 'a'),
                TestInputGenerator.GenerateHugeStringOfSameChars(5000000, 'a') + "b",
                "b" + TestInputGenerator.GenerateHugeStringOfSameChars(5000000, 'a'),
                TestInputGenerator.GenerateHugeStringOfSameChars(50000, 'a') + "b" + TestInputGenerator.GenerateHugeStringOfSameChars(49999, 'a'),
                TestInputGenerator.GenerateHugeStringOfSameChars(50000, 'a') + "b" + TestInputGenerator.GenerateHugeStringOfSameChars(50000, 'a'),
                TestInputGenerator.GenerateHugeStringOfSameChars(50000, 'a') + "qr" + TestInputGenerator.GenerateHugeStringOfSameChars(49999, 'a'),
            };
            for (int i = 0; i < ss.Length; i++)
            {
                var timestart = DateTime.UtcNow;
                var answer = s.LongestPalindrome(ss[i]);
                var timeEnd = DateTime.UtcNow;
                var prettyInput = PrintUtils.ShortString4Print(ss[i]);
                var prettyAnswer = PrintUtils.ShortString4Print(answer);
                Console.WriteLine($"s='{prettyInput}' longest pal: '{prettyAnswer}' (runtime: {(timeEnd - timestart).TotalMilliseconds}ms)");
            }
        }

        static void TestTrappingRainWater()
        {
            var edgeStart = new int[5000000];
            edgeStart[1] = 10000;
            var edgeEnd = new int[5000000];
            edgeEnd[4999998] = 10000;
            edgeEnd[4999999] = 10000;
            var edgeEnd2 = new int[5000000];
            edgeEnd2[4999997] = 10000;
            edgeEnd2[4999999] = 10000;
            var edgeEnd3 = new int[5000000];
            edgeEnd3[4999996] = 10000;
            edgeEnd3[4999998] = 10000;
            edgeEnd3[4999999] = 9000;
            var msa = new TrappingRainWater();
            var ps1 = new[] {
                new[] {0,1,0,2,1,0,1,3,2,1,2,1},
                new[] {4,2,0,3,2,5},
                new[] {11,10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10,11},
                TestInputGenerator.GenerateHugeArrayOfRandomInts(5000000, 0, 10000),
                edgeStart,
                edgeEnd,
                edgeEnd2,
                edgeEnd3
            };
            for (int i = 0; i < ps1.Length; i++)
            {
                var timestart = DateTime.UtcNow;
                var answer = msa.Trap(ps1[i]);
                var timeEnd = DateTime.UtcNow;
                Console.WriteLine($"elevation map:[{string.Join(",", ps1[i].Take(30))}{(ps1[i].Length > 30 ? "..." : "")}] water trapped: {answer} (runtime: {(timeEnd- timestart).TotalMilliseconds})");
            }
        }

        static void TestIsSubsequence()
        {
            var s = new IsStringSubsequence();
            var ss = new[] {
                "abc" ,
                "axc",
                "ace",
                "aec",
                "gay",
                "gay",
                "aaaaaa",
                "rjufvjafbxnbgriwgokdgqdqewn"
            };
            var ts = new[] {
                "ahbgdc" ,
                "ahbgdc" ,
                "abcde" ,
                "abcde" ,
                "yagmonotogsexiagoylo",
                "yagmonotogsexiagolo",
                "bbaaaa",
                "mjmqqjrmzkvhxlyruonekhhofpzzslupzojfuoztvzmmqvmlhgqxehojfowtrinbatjujaxekbcydldglkbxsqbbnrkhfdnpfbuaktupfftiljwpgglkjqunvithzlzpgikixqeuimmtbiskemplcvljqgvlzvnqxgedxqnznddkiujwhdefziydtquoudzxstpjjitmiimbjfgfjikkjycwgnpdxpeppsturjwkgnifinccvqzwlbmgpdaodzptyrjjkbqmgdrftfbwgimsmjpknuqtijrsnwvtytqqvookinzmkkkrkgwafohflvuedssukjgipgmypakhlckvizmqvycvbxhlljzejcaijqnfgobuhuiahtmxfzoplmmjfxtggwwxliplntkfuxjcnzcqsaagahbbneugiocexcfpszzomumfqpaiydssmihdoewahoswhlnpctjmkyufsvjlrflfiktndubnymenlmpyrhjxfdcq"
            };
            for (int i = 0; i < ss.Length; i++)
            {
                Console.WriteLine($"s='{ss[i]}' is subseq of t='{ts[i]}': {s.IsSubsequence(ss[i], ts[i])}");
            }
        }

        static void TestMaximumSubarray()
        {
            var msa = new MaximumSubarray();
            var ps1 = new[] {
                new[] {-2,1,-3,4,-1,2,1,-5,4},
                new[] {1},
                new[] {5,4,-1,7,8},
                new[] {-1},
            };
            for (int i = 0; i < ps1.Length; i++)
            {
                Console.WriteLine($"array:{string.Join(",", ps1[i])} max subarray sum: {string.Join(",", msa.MaxSubArray(ps1[i]))}");
            }
        }

        static void TestIntersectionOfTwoArrays()
        {
            var msa = new IntersectionOfTwoArrays();
            var ps1 = new[] {
                new[] {1,2,2,1},
                new[] {4,9,5},
                new[] {1},
            };
            var ps2 = new[] {
                new[] {2,2},
                new[] {9,4,9,8,4},
                new[] {1},
            };
            for (int i = 0; i < ps1.Length; i++)
            {
                Console.WriteLine($"{string.Join(",", ps1[i])}; {string.Join(",", ps2[i])} : {string.Join(",", msa.Intersection(ps1[i], ps2[i]))}");
            }
        }

        static void TestPowN()
        {
            var vp = new PowN();
            var xs = new[]
            {
                2.0,
                2.1,
                2.0,
                3.0,
                3.0,
                1.00000,
                2.00000,
                2.00000,
                -1.00000,
                -1.00000
            };
            var ns = new[]
            {
                10,
                3,
                -2,
                1,
                0,
                2147483647,
                -2147483648,
                -2147483647,
                2147483647,
                -2147483648
            };
            for (var i = 0; i < xs.Length; ++i)
            {
                var x = xs[i];
                var n = ns[i];
                Console.WriteLine($"{x}^{n} = {vp.MyPow(x, n)}");
            }
        }

        static void TestNumberOfIslands()
        {
            var s = new NumberOfIslands();
            var ns = new[] 
            {
                new[] 
                {
                    new[] { '1','1','1','1','0' },
                    new[] { '1','1','0','1','0' },
                    new[] { '1','1','0','0','0' },
                    new[] { '0','0','0','0','0' },
                },
                new[]
                {
                    new[] { '1','1','0','0','0' },
                    new[] { '1','1','0','0','0' },
                    new[] { '0','0','1','0','0' },
                    new[] { '0','0','0','1','1' },
                },
                new[]
                {
                    new[] { '1','1','1','1','1' },
                    new[] { '1','1','0','0','0' },
                    new[] { '1','1','0','0','1' },
                    new[] { '0','0','0','1','1' },
                },
                new[]
                {
                    new[] { '0','0','1','1','1' },
                    new[] { '0','1','1','0','0' },
                    new[] { '1','1','0','0','1' },
                    new[] { '0','0','0','1','1' },
                },
                new[]
                {
                    new[] { '1','1','1' },
                    new[] { '0','1','0' },
                    new[] { '1','1','1' },
                },
                new[]
                {
                    new[]{'1','1','1','1','1','0','1','1','1','1'},
                    new[]{'1','0','1','0','1','1','1','1','1','1'},
                    new[]{'0','1','1','1','0','1','1','1','1','1'},
                    new[]{'1','1','0','1','1','0','0','0','0','1'},
                    new[]{'1','0','1','0','1','0','0','1','0','1'},
                    new[]{'1','0','0','1','1','1','0','1','0','0'},
                    new[]{'0','0','1','0','0','1','1','1','1','0'},
                    new[]{'1','0','1','1','1','0','0','1','1','1'},
                    new[]{'1','1','1','1','1','1','1','1','0','1'},
                    new[]{'1','0','1','1','1','1','1','1','1','0'}
                },
                new[]
                {
                    new[]{'0','1','1','1','1','0','0','0','1','1'},
                    new[]{'0','0','0','0','1','0','0','0','1','1'},
                    new[]{'1','1','1','0','1','0','1','1','1','1'},
                    new[]{'1','0','1','1','1','0','1','0','0','1'},
                    new[]{'1','1','1','0','0','0','1','0','0','1'},
                    new[]{'0','0','1','0','0','0','1','0','0','1'},
                    new[]{'0','0','1','1','1','1','1','0','0','1'},
                    new[]{'0','0','0','0','0','0','0','0','0','1'},
                    new[]{'0','0','0','0','0','0','0','1','1','1'},
                    new[]{'0','0','0','0','0','0','0','1','1','0'}
                }
            };
            for (int i = 0; i < ns.Length; i++)
            {
                Console.WriteLine($"grid:{ns[i].TwoDimArrayToString()},\nislands: {s.NumIslands(ns[i])}");
            }
        }

        static void TestBinaryTreeMaximumPathSum()
        {
            var vp = new BinaryTreeMaximumPathSum();
            var ps = new[]
            {
                new TreeNode()
                {
                    val = 1,
                    left = new TreeNode()
                    {
                        val = 2,
                    },
                    right = new TreeNode()
                    {
                        val = 3,
                    }
                },
                new TreeNode()
                {
                    val = -10,
                    left = new TreeNode()
                    {
                        val = 9
                    },
                    right = new TreeNode()
                    {
                        val = 20,
                        left = new TreeNode()
                        {
                            val = 15
                        },
                        right = new TreeNode()
                        {
                            val = 7
                        }
                    }
                },
                new TreeNode()
                {
                    val = 1,
                    left = new TreeNode()
                    {
                        val = -2,
                        left = new TreeNode()
                        {
                            val = 1,
                            left = new TreeNode()
                            {
                                val = -1
                            }
                        },
                        right = new TreeNode()
                        {
                            val = 3
                        }
                    },
                    right = new TreeNode()
                    {
                        val = -3,
                        left = new TreeNode()
                        {
                            val = -2
                        }
                    }
                },
                new TreeNode()
                {
                    val = 5,
                    left = new TreeNode()
                    {
                        val = 4,
                        left = new TreeNode()
                        {
                            val = 11,
                            left = new TreeNode()
                            {
                                val = 7
                            },
                            right = new TreeNode()
                            {
                                val = 2
                            }
                        }
                    },
                    right = new TreeNode()
                    {
                        val = 8,
                        left = new TreeNode()
                        {
                            val = 13
                        },
                        right = new TreeNode()
                        {
                            val = 4,
                            right = new TreeNode()
                            {
                                val = 1
                            }
                        }
                    }
                },
                null,
                new TreeNode(),
                new TreeNode()
                {
                    val = -3
                }
            };
            foreach (var p in ps)
            {
                Console.WriteLine($"tree =\n{p}, max path sum = {vp.MaxPathSum(p)}");
            }
        }

        static void TestFlattenBinaryTree()
        {
            var vp = new FlattenBinaryTree();
            var ps = new[]
            {
                new TreeNode()
                {
                    val = 1,
                    left = new TreeNode()
                    {
                        val = 2,
                        left = new TreeNode()
                        {
                            val = 3
                        },
                        right = new TreeNode()
                        {
                            val = 4
                        }
                    },
                    right = new TreeNode()
                    {
                        val = 5,
                        right = new TreeNode()
                        {
                            val = 6
                        }
                    }
                },
                new TreeNode()
                {
                    val = 1,
                    left = new TreeNode()
                    {
                        val = 2,
                        left = new TreeNode()
                        {
                            val = 3
                        },
                        right = new TreeNode()
                        {
                            val = 4
                        }
                    },
                    right = new TreeNode()
                    {
                        val = 5,
                        left = new TreeNode()
                        {
                            val = 6
                        },
                        right = new TreeNode()
                        {
                            val = 7
                        }
                    }
                },
                null,
                new TreeNode()
                {
                    val = 0
                }
            };
            foreach (var p in ps)
            {
                Console.WriteLine($"tree before =\n{p}");
                vp.Flatten(p);
                Console.WriteLine($"tree after =\n{p}\n");
            }
        }

        static void TestSearchSuggestionsSystem()
        {
            var s = new SearchSuggestionsSystem();
            var ns = new[] {
                new[] { "mobile","mouse","moneypot","monitor","mousepad" },
                new[] { "mobile","mouse","moneypot","monitor","mousepad" },
                new[] { "havana" },
                new[] { "bags","baggage","banner","box","cloths" },
            };
            var ps = new[] {
                "mouse" ,
                "monitor" ,
                "havana",
                "bags",
            };
            for (int i = 0; i < ns.Length; i++)
            {
                Console.WriteLine($"products=[{string.Join(",", ns[i])}], search='{ps[i]}' : {s.SuggestedProducts(ns[i], ps[i]).TwoDimListToString()}");
            }
        }

        static void TestValidParenthesis()
        {
            var vp = new ValidParentheses();
            var ps = new[]{ "()", "()[]{}", "(]",
                "((([][]{}()[({})])))", 
                ")))", ")))", "())", "(()", "()()({}{}{}{[][][])))))"
            };
            foreach (var p in ps)
            {
                Console.WriteLine($"{p} : {vp.IsValid(p)}");
            }
        }

        static void TestLongetSubstring()
        {
            var ls = new LongestSubstring();
            var ps = new[] { 
                "abcabcbb", "bbbbb", "pwwkew" ,
                "abcdefffffabc", 
                "abcdefffffabcdefghi", 
                "abcdefffffabcdefghbbbbbbbbbbbbbbbbb", 
                "abcdefffffabcdefghi1234jk5kjhg", 
            };
            foreach (var p in ps)
            {
                Console.WriteLine($"{p} : {ls.LengthOfLongestSubstring(p)}");
            }
        }

        static void TestMedianOfTwoSortedArrays()
        {
            var msa = new MedianOfTwoSortedArrays();
            var ps1 = new[] {
                new[] {1, 3},
                new[] {1, 2},
                new[] {1, 1},
            };
            var ps2 = new[] {
                new[] {2},
                new[] {3, 4},
                new[] {1, 1},
            };
            for (int i = 0; i < ps1.Length; i++)
            {
                Console.WriteLine($"{string.Join(",", ps1[i])}; {string.Join(",", ps2[i])} : {msa.FindMedianSortedArrays(ps1[i], ps2[i])}");
            }
        }

        static void TestCombinations()
        {
            var s = new Combinations();
            var ns = new[] {
                4,
                1,
            };
            var ks = new[] {
                2,
                1
            };
            for (int i = 0; i < ns.Length; i++)
            {
                var result = s.Combine(ns[i], ks[i]);                

                Console.WriteLine($"n={ns[i]}, k={ks[i]} : {result.TwoDimListToString()}");
            }
        }

        static void TestPermutations()
        {
            var s = new Permutations();
            var ns = new[] {
                new[] { 1, 2, 3 },
                new[] { 0, 1 },
                new[] {1},
            };
            for (int i = 0; i < ns.Length; i++)
            {
                var result = s.Permute(ns[i]);                

                Console.WriteLine($"nums=[{string.Join(",", ns[i])}] : {result.TwoDimListToString()}");
            }
        }

        static void TestLongestValidParentheses()
        {
            var vp = new LongestValidParentheses();
            var ps = new[]
            {
                "(()", ")()())", "",
                ")))))))))))))))))", "(((((((((((((((((((((((",
                "()()()()((((((((((((((", "()()()()))))))))))))))))))",
                "(((((((((((((((((((()()()", "))))))))))))))))))))))))()()()",
                "))))))))))))()()()((((((((((((", "(((((((((((((()()())))))))))))))))))",
                "(((((()()()))))))))))))))))))", ")))))))(((((()()()))))))))))))))))))",
                "))))))))(((((()()()))))))))))))))))))((((((((((((((",
                "()(()", "()((((((((((((((((((()", "())))))))))))))()", "())()"
            };
            foreach (var p in ps)
            {
                Console.WriteLine($"{p} : {vp.LongestValidParenthesesLen(p)}");
            }
        }

        static void TestMergeKSortedLists()
        {
            var vp = new MergeKSortedLists();
            var ps = new[]
            {
                new[]
                {
                    new ListNode()
                    { 
                        val = 1,
                        next = new ListNode()
                        {
                            val = 4,
                            next = new ListNode()
                            {
                                val = 5
                            }
                        }
                    },
                    new ListNode()
                    { 
                        val = 1,
                        next = new ListNode()
                        {
                            val = 3,
                            next = new ListNode()
                            {
                                val = 4
                            }
                        }
                    },
                    new ListNode()
                    { 
                        val = 2,
                        next = new ListNode()
                        {
                            val = 6,
                        }
                    },
                },

                new[]
                {
                    new ListNode()
                    { 
                        val = 555,
                        next = new ListNode()
                        {
                            val = 556,
                            next = new ListNode()
                            {
                                val = 600
                            }
                        }
                    },
                    new ListNode()
                    { 
                        val = 561,
                        next = new ListNode()
                        {
                            val = 562,
                            next = new ListNode()
                            {
                                val = 563
                            }
                        }
                    },
                    new ListNode()
                    { 
                        val = 1,
                        next = new ListNode()
                        {
                            val = 2,
                        }
                    },
                },

                new ListNode[] { },
                new ListNode[] { null },
                new[]
                {
                    new ListNode()
                }
            };
            foreach (var p in ps)
            {
                Console.WriteLine($"nums=[\n[{string.Join("]\n[", (object[]) p)}] \n:\n {vp.MergeKLists(p)}");
            }
        }
    }
}
